name: Publish Packages

on:
  release:
    types: [published]

concurrency:
  group: "${{ github.workflow }}-${{ github.event.release.tag_name }}"
  cancel-in-progress: true

jobs:
  check-release-details:
    runs-on: ubuntu-22.04
    outputs:
      isLatestRelease: ${{ steps.check-release.outputs.isLatestRelease }}
    steps:
      - name: Check if latest GitHub release
        id: check-release
        uses: actions/github-script@v7
        with:
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            core.setOutput('isLatestRelease', latestRelease.data.tag_name === context.payload.release.tag_name);
  generate-handlebars-variables:
    needs: check-release-details
    if: ${{ needs.check-release-details.outputs.isLatestRelease }}
    runs-on:  ubuntu-22.04
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install toml-cli
        shell: pwsh
        run: cargo install toml-cli
      - id: create-deb-checksums
        name: Create DEB Checksums
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ github.event.release.tag_name }} -p "*amd64.deb" -O SaunaSim_amd64.deb
          gh release download ${{ github.event.release.tag_name }} -p "*arm64.deb" -O SaunaSim_arm64.deb
          echo deb-sha256-amd64=$((Get-FileHash -Path SaunaSim_amd64.deb -Algorithm SHA256).Hash.ToLower()) >> "$env:GITHUB_OUTPUT"
          echo deb-sha256-arm64=$((Get-FileHash -Path SaunaSim_arm64.deb -Algorithm SHA256).Hash.ToLower()) >> "$env:GITHUB_OUTPUT"
      - name: Generate variables
        shell: pwsh
        run: |
          $env:CARGO_TOML = toml get ${{ github.workspace }}/src-tauri/Cargo.toml .
          echo @"
          {
            "app": {
              "binaryName": "$(jq -r .mainBinaryName ${{ github.workspace }}/src-tauri/tauri.conf.json)",
              "version": "$(echo $env:CARGO_TOML | jq -r .package.version)",
              "homepage": "$(echo $env:CARGO_TOML | jq -r .package.homepage)",
              "shortDesc": "$(echo $env:CARGO_TOML | jq -r .package.description)"
            },
            "githubRepo": "${{ github.repository }}",
            "deb": {
              "sha256": {
                "amd64": "${{ steps.create-deb-checksums.outputs.deb-sha256-amd64 }}",
                "arm64": "${{ steps.create-deb-checksums.outputs.deb-sha256-arm64 }}"
              }
            }
          }
          "@ > variables.json
          echo $(cat variables.json)
      - name: Upload variables.json
        uses: actions/upload-artifact@v4
        with:
          name: variables-json
          path: variables.json
  publish-aur-package:
    runs-on: ubuntu-22.04
    needs: generate-handlebars-variables
    continue-on-error: true
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install hbs-cli
        shell: pwsh
        run: cargo install hbs-cli
      - name: Download variables.json
        uses: actions/download-artifact@v4
        with:
          name: variables-json
      - name: Replace PKGBUILD Variables
        shell: pwsh
        run: |
          Copy-Item -Path "${{ github.workspace }}/src-tauri/packageinfo/aur" -Destination "${{ github.workspace }}/aurdefs" -Recurse -Force
          hbs-cli ${{ github.workspace }}/variables.json ${{ github.workspace }}/aurdefs/PKGBUILD | Set-Content -Path ${{ github.workspace }}/aurdefs/PKGBUILD
          echo $(cat ${{ github.workspace }}/aurdefs/PKGBUILD)
      - name: Publish AUR Package
        uses: KSXGitHub/github-actions-deploy-aur@v3
        with:
          pkgname: sauna-sim
          pkgbuild: ${{ github.workspace }}/aurdefs/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package to ${{ github.event.release.tag_name }}
          ssh_keyscan_types: rsa,ecdsa,ed25519
          assets: |
            ${{ github.workspace }}/aurdefs/sauna-sim.install
  publish-snap-package:
    needs: generate-handlebars-variables
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            deb-arch: amd64
          - os: ubuntu-22.04-arm
            deb-arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install hbs-cli
        shell: pwsh
        run: cargo install hbs-cli
      - name: Download variables.json
        uses: actions/download-artifact@v4
        with:
          name: variables-json
      - name: Replace snapcraft.yml variables
        shell: pwsh
        run: |
          Copy-Item -Path "${{ github.workspace }}/src-tauri/packageinfo/snapcraft/snapcraft.yaml" -Destination "${{ github.workspace }}" -Force
          hbs-cli ${{ github.workspace }}/variables.json ${{ github.workspace }}/snapcraft.yaml | Set-Content -Path ${{ github.workspace }}/snapcraft.yaml
          echo $(cat ${{ github.workspace }}/snapcraft.yaml)
      - name: Download deb file
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ github.event.release.tag_name }} -p "$(jq -r .app.binaryName ${{ github.workspace }}/variables.json)_$(jq -r .app.version ${{ github.workspace }}/variables.json)_${{ matrix.deb-arch }}.deb" -O SaunaSim.deb
      - id: snap-build
        name: Build Snap
        uses: snapcore/action-build@v1
      - name: Publish Snap
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
        with:
          snap: ${{ steps.snap-build.outputs.snap }}
          release: edge
  publish-flathub-package:
    runs-on: ubuntu-22.04
    needs: generate-handlebars-variables
    continue-on-error: true
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Checkout Flathub Repo
        uses: actions/checkout@v4
        with:
          repository: "flathub/com.saunasim.saunasim"
          path: "flathub-repo"
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install hbs-cli
        shell: pwsh
        run: cargo install hbs-cli
      - name: Download variables.json
        uses: actions/download-artifact@v4
        with:
          name: variables-json
      - name: Replace flathub manifest variables
        shell: pwsh
        run: |
          Copy-Item -Path "${{ github.workspace }}/src-tauri/packageinfo/flathub/com.saunasim.saunasim.yml" -Destination "${{ github.workspace }}/flathub-repo" -Force
          hbs-cli ${{ github.workspace }}/variables.json ${{ github.workspace }}/flathub-repo/com.saunasim.saunasim.yml | Set-Content -Path ${{ github.workspace }}/flathub-repo/com.saunasim.saunasim.yml
          echo $(cat ${{ github.workspace }}/flathub-repo/com.saunasim.saunasim.yml)
      - name: Create/Update Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          path: "flathub-repo"
          token: ${{ secrets.GH_BOT_TOKEN }}
          commit-message: "New Release: ${{ github.event.release.tag_name }}"
          body: ${{ github.event.release.body }}